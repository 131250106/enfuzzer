#!/bin/bash
set -x
set -eu
AFL_PREFIX=/opt/enfuzzer
TOOL_BIN=/opt/enfuzzer/bin


dyn-fuzz() {
    
	time=86400
	
	while getopts "alfirt:" arg #选项后面的冒号表示该选项需要参数
	do
        case $arg in
             a)
                echo "afl begin!" 
                ;;
             l)
                echo "libfuzzer begin!"
                ;;
            f)
                echo "aflfast begin!"
                ;;
	    i)
                echo "fairfuzz begin!"
                ;;
	    r)
                echo "radamsa begin!"
                ;;
	    t)
                echo "timeout: $OPTARG!"
	    	let "time=$OPTARG"
                ;;
            ?) 
		echo "unkonw argument"
		exit 1
		;;
        esac
	done

	
	# local args=("$AFL_PREFIX/bin/afl-fuzz" "-m 20981520 -t 1000" "$@")
	# print-args "AFL cmdline:" "${args[@]}"
	# "${args[@]}"
	tmux new -s enfuzzer -d

	tmux send -t "enfuzzer" "timeout $time $AFL_PREFIX/bin/afl-fuzz -i seed -o out -m 20981520 -t 1000  -M master ./aflapp" Enter

	tmux split-window -h -t "enfuzzer"
	tmux send -t "enfuzzer" "timeout $time $AFL_PREFIX/bin/aflfast-fuzz -i seed -o out  -m 20981520 -t 1000 -S fuzzer1 ./aflapp" Enter
	# 默认上下分屏
	tmux split-window -t "enfuzzer"
	tmux select-pane -L
	tmux split-window -t "enfuzzer"
	tmux send -t "enfuzzer" "timeout $time $AFL_PREFIX/bin/fairfuzz -i seed -o out -m 20981520 -t 1000  -S fuzzer2 ./aflapp" Enter
	tmux select-pane -R
	tmux send -t "enfuzzer" "timeout $time $AFL_PREFIX/bin/afl-go -i seed -o out  -m 20981520 -t 1000  -S fuzzer3 ./aflapp" Enter

	tmux attach -t enfuzzer
   
   
}

build-puredriver() {
	  ar r driver.a $TOOL_BIN/afl-driver-64.o
}

build-pure() {
	rm -rf code_pure
	mkdir code_pure
	cp $2 code_pure/$2
	cd code_pure
	
	SRC=${2%%.*}
	
	if [[ "$1" == "-zip" ]]; then
		unzip $2
	elif [[ "$1" == "-gz" ]]; then
		tar -xvf $2
	else
		echo "unknow arg"
		exit 1
	fi
	
	rm $2
	
	export CC="clang"
    export CXX="clang++"
	
	FSANITIZE_FUZZER_FLAGS=""
	
	export CFLAGS="$FSANITIZE_FUZZER_FLAGS"
	export CXXFLAGS="$FSANITIZE_FUZZER_FLAGS"

	build-puredriver
	
	$SRC/build
	
	cd ..
	cp code_pure/app build/pureapp
}

build-afldriver() {
	  ar r driver.a $TOOL_BIN/afl-driver-64.o
	 
#	$CC $CFLAGS -c -w  /opt/enfuzzer/bin/afl/llvm_mode/afl-llvm-rt.o.c
#  	$CXX $CXXFLAGS -std=c++11 -c /opt/enfuzzer/bin/Fuzzer/afl/afl_driver.cpp -I /opt/enfuzzer/bin/Fuzzer/
#  	ar r driver.a  afl_driver.o afl-llvm-rt.o.o
}

build-afl() {
	rm -rf code_afl
	mkdir code_afl
	cp $2 code_afl/$2
	cd code_afl
	
	SRC=${2%%.*}
	
	if [[ "$1" == "-zip" ]]; then
		unzip $2
	elif [[ "$1" == "-gz" ]]; then
		tar -xvf $2
	else
		echo "unknow arg"
		exit 1
	fi
	
	rm $2
	
#	export CC=${CC:-"$TOOL_BIN/afl-clang-fast"}
#	export CXX=${CXX:-"$TOOL_BIN/afl-clang-fast++"}
	
	export CC="$TOOL_BIN/afl-clang-fast"
	export CXX="$TOOL_BIN/afl-clang-fast++"
	
	FSANITIZE_FUZZER_FLAGS="-fno-omit-frame-pointer -g -fsanitize=address"
#	export CFLAGS=${CFLAGS:-$FSANITIZE_FUZZER_FLAGS}
#	export CXXFLAGS=${CXXFLAGS:-$FSANITIZE_FUZZER_FLAGS}
	
	export CFLAGS="$FSANITIZE_FUZZER_FLAGS"
	export CXXFLAGS="$FSANITIZE_FUZZER_FLAGS"

	build-afldriver
	
	$SRC/build
	
	cd ..
	cp code_afl/app build/aflapp
}

build-libdriver() {
#	$TOOL_BIN/libfuzzer/build.sh
	cp $TOOL_BIN/libFuzzer.a driver.a
}

build-lib() {
	rm -rf code_lib
	mkdir code_lib
	cp $2 code_lib/$2
	cd code_lib
	
	SRC=${2%%.*}
	
	if [[ "$1" == "-zip" ]]; then
		unzip $2
	elif [[ "$1" == "-gz" ]]; then
		tar -xvf $2
	else
		echo "unknow arg"
		exit 1
	fi
	
	rm $2

#	export CC=${CC:-"clang"}
#	export CXX=${CXX:-"clang++"}

	export CC="clang"
    export CXX="clang++"
	
	FSANITIZE_FUZZER_FLAGS="-fno-omit-frame-pointer -g -fsanitize=address,fuzzer-no-link"
#	export CFLAGS=${CFLAGS:-$FSANITIZE_FUZZER_FLAGS}
#	export CXXFLAGS=${CXXFLAGS:-$FSANITIZE_FUZZER_FLAGS}

        export CFLAGS="$FSANITIZE_FUZZER_FLAGS"
        export CXXFLAGS="$FSANITIZE_FUZZER_FLAGS"
	
	build-libdriver
	
	$SRC/build
	
	cd ..
	cp code_lib/app build/libapp
}

seed() {
	rm -rf build/seed
	mkdir build/seed
	
	if [[ "$1" == "-zip" ]]; then
		unzip $2
		cp -r ${2%%.*}/* build/seed
	elif [[ "$1" == "-gz" ]]; then
		tar -xvf $2
		cp -r ${2%%.*}/* build/seed
	else
		echo "unknow arg"
		exit 1
	fi
	
}

usage() {
    local prog="$(basename "$0")"
    log-error "Usage\n" \
              "    $prog app\n"
}


[[ "$#" == 0 ]] && usage

 if [[ "$1" == "run" ]]; then
	echo "enfuzzer run"
	cd build
	dyn-fuzz "${@:2}"
	cd ..
elif [[ "$1" == "build" ]]; then
	echo "enfuzzer build"
	rm -rf build
	mkdir build
	build-pure "${@:2}"
	build-afl "${@:2}"
	build-lib "${@:2}"
elif [[ "$1" == "seed" ]]; then
	echo "enfuzzer seed"
	seed "${@:2}"
elif [[ "$1" == "env" ]]; then
	echo "enfuzzer env"
elif [[ "$1" == "file" ]]; then
	echo "enfuzzer file"
else
	echo "unknow arg"
	exit 1
fi
